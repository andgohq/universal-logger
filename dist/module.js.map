{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import pino from 'pino';\nimport chalkModule from 'chalk';\n\nexport type Level = 'debug' | 'fatal' | 'error' | 'warn' | 'info' | 'trace';\nexport type StatusType = 'error' | 'warn' | 'info' | 'debug';\nexport type LogFn = pino.LogFn;\nexport type ExternalLoggerType = (opts: {\n  message: string;\n  context?: Record<string, any>;\n  status?: StatusType;\n}) => void;\n\nexport interface AGLogger {\n  fatal: LogFn;\n  error: LogFn;\n  warn: LogFn;\n  info: LogFn;\n  debug: LogFn;\n  child: (params: Record<string, any>) => AGLogger;\n}\n\nexport const NO_OPS_LOGGER: ExternalLoggerType = () => {};\n\nconst DEFAULT_MASK_LENGTH = 8;\nconst DEFAULT_CHALK_LEVEL = 1;\n\nconst dateTimeFormatter = new Intl.DateTimeFormat('ja-jp', {\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit',\n});\n\nconst LEVEL_TO_CONSOLE: Record<Level, StatusType> = {\n  debug: 'debug',\n  fatal: 'info',\n  error: 'info',\n  warn: 'warn',\n  info: 'info',\n  trace: 'info',\n};\n\nconst LEVEL_TO_LABEL: Record<Level, string> = {\n  debug: 'D',\n  fatal: 'F',\n  error: 'E',\n  warn: 'W',\n  info: 'I',\n  trace: 'I',\n};\n\nlet chalk = new chalkModule.Instance({ level: DEFAULT_CHALK_LEVEL });\nlet PRESENT_EXTERNAL_LOGGER = NO_OPS_LOGGER;\n\nconst OPTIONS = {\n  level: (process.env.LOG_LEVEL ?? 'debug') as Level,\n  context: {} as Record<string, any>,\n  maskTargets: [] as string[],\n  maskFunc: (s: string) => `${s.substring(0, DEFAULT_MASK_LENGTH)}***`,\n  enableStack: true,\n  browser: {\n    inline: false,\n  },\n};\n\nexport const updateOptions = (options: Partial<typeof OPTIONS>) => {\n  Object.assign(OPTIONS, options);\n};\n\nexport function setExternalLogger(logger: ExternalLoggerType) {\n  PRESENT_EXTERNAL_LOGGER = logger;\n}\n\nexport const setColorLevel = (level: chalkModule.Level) => {\n  chalk = new chalkModule.Instance({ level });\n};\n\nconst serializer = (k: string, v: any) => {\n  const isMaskTarget =\n    OPTIONS.maskTargets.findIndex((ele) => ele === k) >= 0 && (typeof v === 'string' || typeof v === 'number');\n\n  if (isMaskTarget) {\n    return OPTIONS.maskFunc(`${v}`);\n  } else {\n    return v;\n  }\n};\n\nconst transform = (obj: Record<string, any>) => {\n  return Object.fromEntries(Object.entries(obj).map(([k, v]) => [k, serializer(k, v)]));\n};\n\nconst pickExists = (obj: Record<string, any>) => {\n  return Object.fromEntries(Object.entries(obj).filter(([, v]) => v !== undefined));\n};\n\nconst summarize = (obj: Record<string, any>) => {\n  // omit stack, level, time, msg from the parameter object\n  const { type, message, stack, err, msg, ...rest } = obj as {\n    // properties when the object is Error instance\n    // error style 1\n    type?: 'Error';\n    message?: string; // exist when logger.error is used\n    stack?: string; // exist when logger.error is used\n    // error style 2\n    err?: Error;\n    // standard properties\n    msg?: string;\n  };\n\n  const isErrorMode = (type == 'Error' && stack) || err;\n  const finalMsg = (isErrorMode ? msg ?? message ?? err?.message : msg) ?? '';\n  const finalParams = {\n    ...transform(rest),\n    ...(isErrorMode && OPTIONS.enableStack\n      ? { stack: (stack ?? err?.stack ?? '').split('\\n') }\n      : pickExists({ type, message, stack })),\n  };\n\n  return { msg: finalMsg, ...finalParams };\n};\n\nexport const logFactory = (name: string): AGLogger =>\n  pino({\n    name,\n    level: OPTIONS.level,\n    formatters: {\n      // omit pid and hostname\n      bindings: ({ name }) => ({ name }),\n      // for nodejs environment only\n      log: (o) => {\n        const { level, time, ...rest } = o as Record<string, any>;\n\n        return { level, time, ...summarize(rest) };\n      },\n    },\n    browser: {\n      // use Pino's standard serializers\n      // https://github.com/pinojs/pino-std-serializers\n      serialize: false,\n      write: (o) => {\n        const { level, time, ...rest } = o as Record<string, any>;\n        const { msg, ...params } = summarize(rest);\n\n        const LEVEL_TO_COLOR: Record<Level, typeof chalkModule.Instance | ((s: string) => string)> = {\n          debug: chalk.gray,\n          fatal: chalk.bgRed.white,\n          error: chalk.red,\n          warn: chalk.yellow,\n          info: (s: string) => s,\n          trace: (s: string) => s,\n        };\n\n        const color = LEVEL_TO_COLOR[pino.levels.labels[`${level}`]];\n        const timeLabel = dateTimeFormatter.format(time);\n        const levelKey = pino.levels.labels[`${level}`] as Level;\n        const consoleKey = LEVEL_TO_CONSOLE[levelKey];\n        const levelLabel = LEVEL_TO_LABEL[levelKey];\n\n        const s = `${timeLabel} ${levelLabel} [${name}] ${msg}`;\n\n        if (Object.keys(params).length) {\n          if (OPTIONS.browser.inline) {\n            console[consoleKey](color(`${s} ${JSON.stringify(params)}`));\n          } else {\n            console[consoleKey](color(s), params);\n          }\n        } else {\n          console[consoleKey](color(s));\n        }\n\n        PRESENT_EXTERNAL_LOGGER({ message: msg || '', context: { logger: name, ...params }, status: consoleKey });\n      },\n    },\n  });\n"],"names":[],"version":3,"file":"module.js.map"}