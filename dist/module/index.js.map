{"mappings":"4IAOA,MAAMA,EAAU,CACdC,oBAAoB,EACpBC,eAAQC,EAA2B,SACnCC,aAAa,EACbC,cAAe,GACfC,MAAO,GACPC,SAAWC,GAAD,GAAAC,OAAkBD,EAAEE,OAAO,EAAG,GAA9B,QAKNC,EAA6C,CACjDC,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,KAAM,OACNC,MAAO,QACPC,MAAO,eAGF,SAASC,YAAYC,GAC1BC,EAAYC,KAAKF,GAEjBnB,EAAQC,oBAAqB,SAGxB,SAASqB,eAAeC,EAAiBC,EAAmBC,GAC5DzB,EAAQC,oBAIbmB,EAAYM,OAAOC,IACjBJ,EACA,CACEC,QAAS,IAAKxB,EAAQK,iBAAkBmB,IAE1CC,UAIG,MAAMG,YAAc,CAAC1B,EAAiBE,GAAc,KACzDyB,OAAOC,OAAO9B,EAAS,CAAEE,SAAAA,EAAUE,YAAAA,YAG9B,MAAM2B,WAAcP,IACzBxB,EAAQK,cAAgBmB,UAGnB,MAAMQ,SAAY1B,IACvBN,EAAQM,MAAQA,UAGX,MAAM2B,YAAeC,IAC1BlC,EAAQO,SAAW2B,UAiBd,MAAMC,WAAcC,GACzBC,EAAK,CACHD,KAAAA,EACAhC,cAAaJ,EAAQI,aACjB,CACEkC,cAAe,eACfC,OAAQ,gBAGdC,MAAOxC,EAAQE,SACfuC,WAAY,CACVd,IAAMe,GACJb,OAAOc,YACLd,OAAOe,QAAQF,GAAGG,KAAI,EAAEC,EAAGC,KAAO,CAChCD,EACA9C,EAAQM,MAAM0C,WAAWC,GAAQA,IAAQH,KAAM,IAAmB,iBAANC,GAA+B,iBAANA,GACjF/C,EAAQO,SAAR,GAAAE,OAAoBsC,IACpBA,OAIZG,QAAS,CACPC,WAAW,EACXC,MAAQV,IACN,MAAMW,KAAEA,EAAFC,MAAQA,EAARd,MAAeA,EAAfe,KAAsBA,EAAtBC,IAA4BA,KAAQC,GAASf,EAQ7CgB,EAAYC,EAAO,IAAIC,KAAKL,GAAO,WAAY,CAAEM,OAAQC,IACzDC,EAAapD,EAAgB0B,EAAK2B,OAAOC,OAAZ,GAAAxD,OAAsB+B,KAEnDhC,EAAC,GAAAC,OAAMiD,EAAN,MAAAjD,OAAoB2B,EAApB,MAAA3B,OAA6B+C,MAAAA,EAAAA,EAAO,IAErCU,EAASrC,OAAOc,YACpBd,OAAOe,QAAQa,GAAMZ,KAAI,EAAEC,EAAGC,KAAO,CACnCD,EACA9C,EAAQM,MAAM0C,WAAWC,GAAQA,IAAQH,KAAM,IAAmB,iBAANC,GAA+B,iBAANA,GACjF/C,EAAQO,SAAR,GAAAE,OAAoBsC,IACpBA,MAIJlB,OAAOsC,KAAKD,GAAQE,OACtBC,QAAQN,GAAYvD,EAAG0D,GAEvBG,QAAQN,GAAYvD,GAGtBc,eAAekC,MAAAA,EAAAA,EAAO,GAAI,CAAE9B,OAAQU,KAAS8B,GAAUH","sources":["./src/index.ts"],"sourcesContent":["import pino, { Level } from 'pino';\nexport type { Logger, Level } from 'pino';\nimport { format } from 'date-fns';\nimport ja from 'date-fns/locale/ja';\nimport { datadogLogs } from '@datadog/browser-logs';\nimport { Context } from '@datadog/browser-core';\n\nconst options = {\n  datadogInitialized: false,\n  logLevel: process.env.LOG_LEVEL ?? 'debug',\n  prettyPrint: false,\n  sharedContext: {},\n  masks: [] as string[],\n  maskFunc: (s: string) => `${s.substr(0, 8)}***`,\n};\n\nexport type StatusType = Exclude<Parameters<typeof datadogLogs['logger']['log']>[2], undefined>;\n\nconst PINO_TO_CONSOLE: Record<Level, StatusType> = {\n  fatal: 'error',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug',\n  trace: 'info',\n};\n\nexport function initDatadog(userConfiguration: Parameters<typeof datadogLogs.init>[0]) {\n  datadogLogs.init(userConfiguration);\n\n  options.datadogInitialized = true;\n}\n\nexport function datadogMessage(message: string, context?: Context, status?: StatusType) {\n  if (!options.datadogInitialized) {\n    return;\n  }\n\n  datadogLogs.logger.log(\n    message,\n    {\n      context: { ...options.sharedContext, ...context },\n    },\n    status\n  );\n}\n\nexport const setLogLevel = (logLevel: Level, prettyPrint = false) => {\n  Object.assign(options, { logLevel, prettyPrint });\n};\n\nexport const setContext = (context: Record<string, any>) => {\n  options.sharedContext = context;\n};\n\nexport const setMasks = (masks: string[]) => {\n  options.masks = masks;\n};\n\nexport const setMaskFunc = (f: (s: string) => string) => {\n  options.maskFunc = f;\n};\n\nexport type AGLoggerFunc = (\n  msgOrMergingObject?: string | Record<string, any>,\n  msg?: string,\n  ...interpolationValues: any[]\n) => void;\n\nexport interface AGLogger {\n  fatal: AGLoggerFunc;\n  error: AGLoggerFunc;\n  warn: AGLoggerFunc;\n  info: AGLoggerFunc;\n  debug: AGLoggerFunc;\n}\n\nexport const logFactory = (name: string): AGLogger =>\n  pino({\n    name,\n    prettyPrint: options.prettyPrint\n      ? {\n          translateTime: 'SYS:HH:mm:ss',\n          ignore: 'pid,hostname',\n        }\n      : false,\n    level: options.logLevel,\n    formatters: {\n      log: (o) =>\n        Object.fromEntries(\n          Object.entries(o).map(([k, v]) => [\n            k,\n            options.masks.findIndex((ele) => ele === k) >= 0 && (typeof v === 'string' || typeof v === 'number')\n              ? options.maskFunc(`${v}`)\n              : v,\n          ])\n        ),\n    },\n    browser: {\n      serialize: true,\n      write: (o) => {\n        const { type, stack, level, time, msg, ...rest } = o as {\n          type?: 'Error'; // exist when logger.error is used\n          stack?: string; // exist when logger.error is used\n          level: number; // this is not a label (maybe this is a spec. bug)\n          time: number;\n          msg?: string;\n        };\n\n        const timeLabel = format(new Date(time), 'HH:mm:ss', { locale: ja });\n        const levelLabel = PINO_TO_CONSOLE[pino.levels.labels[`${level}`] as Level];\n\n        const s = `${timeLabel} [${name}] ${msg ?? ''}`;\n\n        const masked = Object.fromEntries(\n          Object.entries(rest).map(([k, v]) => [\n            k,\n            options.masks.findIndex((ele) => ele === k) >= 0 && (typeof v === 'string' || typeof v === 'number')\n              ? options.maskFunc(`${v}`)\n              : v,\n          ])\n        );\n\n        if (Object.keys(masked).length) {\n          console[levelLabel](s, masked);\n        } else {\n          console[levelLabel](s);\n        }\n\n        datadogMessage(msg ?? '', { logger: name, ...masked }, levelLabel);\n      },\n    },\n  });\n"],"names":["options","datadogInitialized","logLevel","undefined","prettyPrint","sharedContext","masks","maskFunc","s","concat","substr","PINO_TO_CONSOLE","fatal","error","warn","info","debug","trace","initDatadog","userConfiguration","datadogLogs","init","datadogMessage","message","context","status","logger","log","setLogLevel","Object","assign","setContext","setMasks","setMaskFunc","f","logFactory","name","pino","translateTime","ignore","level","formatters","o","fromEntries","entries","map","k","v","findIndex","ele","browser","serialize","write","type","stack","time","msg","rest","timeLabel","format","Date","locale","ja","levelLabel","levels","labels","masked","keys","length","console"],"version":3,"file":"index.js.map"}