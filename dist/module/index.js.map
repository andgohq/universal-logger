{"mappings":"s3BAOA,IAAMA,EAAU,CAAEC,oBAAoB,EAAOC,SAAU,QAASC,aAAa,GAEvEC,EAA6C,CACjDC,MAAOC,EAAWC,MAClBA,MAAOD,EAAWC,MAClBC,KAAMF,EAAWE,KACjBC,KAAMH,EAAWG,KACjBC,MAAOJ,EAAWI,MAClBC,MAAOL,EAAWG,aAGb,SAASG,YAAYC,GAC1BC,EAAYC,KAAK,CACfC,YAAaH,EAAKG,YAClBC,WAAYC,EAAWC,GACvBC,cAAeP,EAAKO,cACpBC,oBAAoB,EACpBC,qBAAqB,EACrBC,WAAY,MAGdvB,EAAQC,oBAAqB,SAGxB,SAASuB,eAAeC,EAAiBC,EAAmBC,GAC5D3B,EAAQC,oBAIba,EAAYc,OAAOC,IACjBJ,EACA,CACEC,QAAAA,GAEFC,UAIG,IAAMG,YAAc,SAAC5B,GAAyC,IAAxBC,EAAwB4B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACnEG,OAAOC,OAAOnC,EAAS,CAAEE,SAAAA,EAAUC,YAAAA,YAiB9B,IAAMiC,WAAa,SAACC,GAAD,OACxBC,EAAK,CACHD,KAAAA,EACAlC,cAAaH,EAAQG,aACjB,CACEoC,cAAe,eACfC,OAAQ,gBAGdC,MAAOzC,EAAQE,SACfwC,QAAS,CACPC,WAAW,EACXC,MAAO,SAACC,GAAM,IAAAC,EAAAC,EACuCF,EAA3CG,EADID,EACJC,KAAMC,EADFF,EACEE,MAAOR,EADTM,EACSN,MAAOS,EADhBH,EACgBG,KAAMC,EADtBJ,EACsBI,IAAQC,EAD9BC,EAAAN,EAAA,CAAA,OAAA,QAAA,QAAA,OAAA,QASNO,EAAkB,UAATN,EAAA,QAAAF,EAAA,GAAAS,OAAsBN,MAAAA,OAAtB,EAAsBA,EAAOO,MAAM,MAAM,GAAGC,OAAO,GAAnD,YAAA,IAAAX,EAAAA,EAA4D,SAAW,GAEhFY,EAAYC,EAAO,IAAIC,KAAKV,GAAO,WAAY,CAAEW,OAAQC,IACzDC,EAAa3D,EAAgBkC,EAAK0B,OAAOC,OAAZ,GAAAV,OAAsBd,KAEnDyB,EAAC,GAAAX,OAAMG,EAAN,MAAAH,OAAoBlB,EAApB,MAAAkB,OAA6BD,GAA7BC,OAAsCJ,MAAAA,EAAAA,EAAO,IAEhDjB,OAAOiC,KAAKf,GAAMpB,OACpBoC,QAAQL,GAAYG,EAAGd,GAEvBgB,QAAQL,GAAYG,GAGtB1C,eAAe2B,MAAAA,EAAAA,EAAO,kWAARkB,CAAA,GAAiBjB,GAAQW","sources":["./src/index.ts"],"sourcesContent":["import pino, { Level } from 'pino';\nexport type { Logger, Level } from 'pino';\nimport { format } from 'date-fns';\nimport ja from 'date-fns/locale/ja';\nimport { datadogLogs, StatusType, Datacenter } from '@datadog/browser-logs';\nimport { Context } from '@datadog/browser-core';\n\nconst options = { datadogInitialized: false, logLevel: 'debug', prettyPrint: false };\n\nconst PINO_TO_CONSOLE: Record<Level, StatusType> = {\n  fatal: StatusType.error,\n  error: StatusType.error,\n  warn: StatusType.warn,\n  info: StatusType.info,\n  debug: StatusType.debug,\n  trace: StatusType.info,\n};\n\nexport function initDatadog(opts: { clientToken: string; applicationId: string }) {\n  datadogLogs.init({\n    clientToken: opts.clientToken,\n    datacenter: Datacenter.US,\n    applicationId: opts.applicationId,\n    silentMultipleInit: true,\n    forwardErrorsToLogs: true,\n    sampleRate: 100,\n  });\n\n  options.datadogInitialized = true;\n}\n\nexport function datadogMessage(message: string, context?: Context, status?: StatusType) {\n  if (!options.datadogInitialized) {\n    return;\n  }\n\n  datadogLogs.logger.log(\n    message,\n    {\n      context,\n    },\n    status\n  );\n}\n\nexport const setLogLevel = (logLevel: Level, prettyPrint = false) => {\n  Object.assign(options, { logLevel, prettyPrint });\n};\n\nexport type AGLoggerFunc = (\n  msgOrMergingObject?: string | Record<string, any>,\n  msg?: string,\n  ...interpolationValues: any[]\n) => void;\n\nexport interface AGLogger {\n  fatal: AGLoggerFunc;\n  error: AGLoggerFunc;\n  warn: AGLoggerFunc;\n  info: AGLoggerFunc;\n  debug: AGLoggerFunc;\n}\n\nexport const logFactory = (name: string): AGLogger =>\n  pino({\n    name,\n    prettyPrint: options.prettyPrint\n      ? {\n          translateTime: 'SYS:HH:mm:ss',\n          ignore: 'pid,hostname',\n        }\n      : false,\n    level: options.logLevel,\n    browser: {\n      serialize: true,\n      write: (o) => {\n        const { type, stack, level, time, msg, ...rest } = o as {\n          type?: 'Error'; // exist when logger.error is used\n          stack?: string; // exist when logger.error is used\n          level: number; // this is not a label (maybe this is a spec. bug)\n          time: number;\n          msg?: string;\n        };\n\n        const errMsg = type === 'Error' ? `${stack?.split('\\n')[0].substr(7)} ` ?? 'Error ' : '';\n\n        const timeLabel = format(new Date(time), 'HH:mm:ss', { locale: ja });\n        const levelLabel = PINO_TO_CONSOLE[pino.levels.labels[`${level}`] as Level];\n\n        const s = `${timeLabel} [${name}] ${errMsg}${msg ?? ''}`;\n\n        if (Object.keys(rest).length) {\n          console[levelLabel](s, rest);\n        } else {\n          console[levelLabel](s);\n        }\n\n        datadogMessage(msg ?? '', { ...rest }, levelLabel);\n      },\n    },\n  });\n"],"names":["options","datadogInitialized","logLevel","prettyPrint","PINO_TO_CONSOLE","fatal","StatusType","error","warn","info","debug","trace","initDatadog","opts","datadogLogs","init","clientToken","datacenter","Datacenter","US","applicationId","silentMultipleInit","forwardErrorsToLogs","sampleRate","datadogMessage","message","context","status","logger","log","setLogLevel","arguments","length","undefined","Object","assign","logFactory","name","pino","translateTime","ignore","level","browser","serialize","write","o","_ref2","_ref","type","stack","time","msg","rest","$3ea5b3f0a70620db33ca8d985ee13ccc$var$_objectWithoutProperties","errMsg","concat","split","substr","timeLabel","format","Date","locale","ja","levelLabel","levels","labels","s","keys","console","$3ea5b3f0a70620db33ca8d985ee13ccc$var$_objectSpread"],"version":3,"file":"index.js.map"}