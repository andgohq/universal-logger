{"mappings":"s3BAOA,IAAIA,GAAsB,EAEpBC,EAA6C,CACjDC,MAAOC,EAAWC,MAClBA,MAAOD,EAAWC,MAClBC,KAAMF,EAAWE,KACjBC,KAAMH,EAAWG,KACjBC,MAAOJ,EAAWI,MAClBC,MAAOL,EAAWG,aAGb,SAASG,YAAYC,GAC1BC,EAAYC,KAAK,CACfC,YAAaH,EAAKG,YAClBC,WAAYC,EAAWC,GACvBC,cAAeP,EAAKO,cACpBC,oBAAoB,EACpBC,qBAAqB,EACrBC,WAAY,MAGdpB,GAAsB,SAGjB,SAASqB,eAAeC,EAAiBC,EAAmBC,GAC5DxB,GAILW,EAAYc,OAAOC,IACjBJ,EACA,CACEC,QAAAA,GAEFC,GAIJ,IAAMG,EAAaC,EAAK,CACtBC,MAAO,QACPC,QAAS,CACPC,WAAW,EACXC,MAAO,SAACC,GAAM,IAAAC,EAAAC,EAC+CF,EAA3CG,GADJD,EACJE,OADIF,EACIC,MAAME,EADVH,EACUG,MAAOT,EADjBM,EACiBN,MAAOU,EADxBJ,EACwBI,KAAMC,EAD9BL,EAC8BK,IAAQC,EADtCC,EAAAP,EAAA,CAAA,SAAA,OAAA,QAAA,QAAA,OAAA,QAUNQ,EAAkB,UAATP,EAAA,QAAAF,EAAA,GAAAU,OAAsBN,MAAAA,OAAtB,EAAsBA,EAAOO,MAAM,MAAM,GAAGC,OAAO,GAAnD,YAAA,IAAAZ,EAAAA,EAA4D,SAAW,GAEhFa,EAAYC,EAAO,IAAIC,KAAKV,GAAO,WAAY,CAAEW,OAAQC,IACzDC,EAAanD,EAAgB0B,EAAW0B,OAAOC,OAAlB,GAAAV,OAA4Bf,KAE3D0B,OAAOC,KAAKf,GAAMgB,OACpBC,QAAQN,GAAR,GAAAR,OAAuBG,EAAvB,KAAAH,OAAoCD,GAApCC,OAA6CJ,MAAAA,EAAAA,EAAO,IAAMC,GAE1DiB,QAAQN,GAAR,GAAAR,OAAuBG,EAAvB,KAAAH,OAAoCD,GAApCC,OAA6CJ,MAAAA,EAAAA,EAAO,KAGtDnB,eAAemB,MAAAA,EAAAA,EAAO,kWAARmB,CAAA,GAAiBlB,GAAQW,cAKtC,IAAMQ,YAAc,SAAC/B,GAC1BF,EAAWE,MAAQA,UAiBd,IAAMgC,WAAa,SAACC,GAGzB,OAFgBnC,EAAWoC,MAAM,CAAE1B,OAAQyB","sources":["./src/index.ts"],"sourcesContent":["import pino, { Level } from 'pino';\nexport type { Logger, Level } from 'pino';\nimport { format } from 'date-fns';\nimport ja from 'date-fns/locale/ja';\nimport { datadogLogs, StatusType, Datacenter } from '@datadog/browser-logs';\nimport { Context } from '@datadog/browser-core';\n\nlet DATADOG_INITIALIZED = false;\n\nconst PINO_TO_CONSOLE: Record<Level, StatusType> = {\n  fatal: StatusType.error,\n  error: StatusType.error,\n  warn: StatusType.warn,\n  info: StatusType.info,\n  debug: StatusType.debug,\n  trace: StatusType.info,\n};\n\nexport function initDatadog(opts: { clientToken: string; applicationId: string }) {\n  datadogLogs.init({\n    clientToken: opts.clientToken,\n    datacenter: Datacenter.US,\n    applicationId: opts.applicationId,\n    silentMultipleInit: true,\n    forwardErrorsToLogs: true,\n    sampleRate: 100,\n  });\n\n  DATADOG_INITIALIZED = true;\n}\n\nexport function datadogMessage(message: string, context?: Context, status?: StatusType) {\n  if (!DATADOG_INITIALIZED) {\n    return;\n  }\n\n  datadogLogs.logger.log(\n    message,\n    {\n      context,\n    },\n    status\n  );\n}\n\nconst baseLogger = pino({\n  level: 'debug', // this is overwritten by setLogLevel\n  browser: {\n    serialize: true,\n    write: (o) => {\n      const { module, type, stack, level, time, msg, ...rest } = o as {\n        module: string;\n        type?: 'Error'; // exist when logger.error is used\n        stack?: string;\n        level: number; // this is not a label (maybe this is a spec. bug)\n        time: number;\n        msg?: string;\n      };\n\n      const errMsg = type === 'Error' ? `${stack?.split('\\n')[0].substr(7)} ` ?? 'Error ' : '';\n\n      const timeLabel = format(new Date(time), 'HH:mm:ss', { locale: ja });\n      const levelLabel = PINO_TO_CONSOLE[baseLogger.levels.labels[`${level}`] as Level];\n\n      if (Object.keys(rest).length) {\n        console[levelLabel](`${timeLabel} ${errMsg}${msg ?? ''}`, rest);\n      } else {\n        console[levelLabel](`${timeLabel} ${errMsg}${msg ?? ''}`);\n      }\n\n      datadogMessage(msg ?? '', { ...rest }, levelLabel);\n    },\n  },\n});\n\nexport const setLogLevel = (level: Level) => {\n  baseLogger.level = level;\n};\n\nexport type AGLoggerFunc = (\n  msgOrMergingObject?: string | Record<string, any>,\n  msg?: string,\n  ...interpolationValues: any[]\n) => void;\n\nexport interface AGLogger {\n  fatal: AGLoggerFunc;\n  error: AGLoggerFunc;\n  warn: AGLoggerFunc;\n  info: AGLoggerFunc;\n  debug: AGLoggerFunc;\n}\n\nexport const logFactory = (name: string): AGLogger => {\n  const _logger = baseLogger.child({ module: name });\n\n  return _logger;\n};\n"],"names":["DATADOG_INITIALIZED","PINO_TO_CONSOLE","fatal","StatusType","error","warn","info","debug","trace","initDatadog","opts","datadogLogs","init","clientToken","datacenter","Datacenter","US","applicationId","silentMultipleInit","forwardErrorsToLogs","sampleRate","datadogMessage","message","context","status","logger","log","baseLogger","pino","level","browser","serialize","write","o","_ref2","_ref","type","module","stack","time","msg","rest","$bc053f3e60c3927aee7b34acb8183a8a$var$_objectWithoutProperties","errMsg","concat","split","substr","timeLabel","format","Date","locale","ja","levelLabel","levels","labels","Object","keys","length","console","$bc053f3e60c3927aee7b34acb8183a8a$var$_objectSpread","setLogLevel","logFactory","name","child"],"version":3,"file":"index.js.map"}