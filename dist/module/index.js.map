{"mappings":"4KAMA,IAAIA,GAAsB,SAEnB,SAASC,YAAYC,GAC1BC,EAAYC,KAAK,CACfC,YAAaH,EAAKG,YAClBC,WAAYC,EAAWC,GACvBC,cAAeP,EAAKO,cACpBC,oBAAoB,EACpBC,qBAAqB,EACrBC,WAAY,MAGdZ,GAAsB,SAGjB,SAASa,eAAeC,EAAiBC,EAAmBC,GAC5DhB,GAILG,EAAYc,OAAOC,IACjBJ,EACA,CACEC,QAAAA,GAEFC,GAIJ,IAAMG,EAAaC,EAAK,CACtBC,MAAO,QACPC,QAAS,CACPC,WAAW,EACXC,MAAO,aACPC,SAAU,CACRC,KAAKL,EAAOM,GAAU,IAAAC,EACdC,EAAaF,EAASG,SAASC,KAAI,SAACC,GAAD,OAAOA,EAAEC,UAAQC,KAAK,KAEzDC,EAAYC,EAAO,IAAIC,KAAKV,EAASW,IAAK,WAAY,CAAEC,OAAQC,IAIhEC,EAAoB,UAAVpB,GAAmD,UAA9BM,EAASe,SAAS,GAAGC,KAEpDC,EAAMH,EAAO,QAAAb,EAAGD,EAASe,SAAS,UAArB,IAAAd,EAAAA,EAA2BD,EAASe,SAAS,GAAGE,IAAMjB,EAASe,SAAS,GAIrF3B,EAAUY,EAASe,SAASD,EAAU,EAAI,GAGhD,GAAmB,iBAARG,EAET,MADAC,QAAQC,MAAM,WAAY,CAAEzB,MAAAA,EAAOM,SAAAA,EAAUiB,IAAAA,IACvC,IAAIG,MAAJ,GAAAC,OAAaJ,EAAb,2BAER,GAAuB,iBAAZ7B,EAET,MADA8B,QAAQC,MAAM,WAAY,CAAEzB,MAAAA,EAAOM,SAAAA,EAAUZ,QAAAA,IACvC,IAAIgC,MAAJ,GAAAC,OAAaJ,EAAb,2BAIRC,QAAQxB,GAAR,GAAA2B,OAAkBb,EAAlB,MAAAa,OAAgCnB,EAAhC,MAAAmB,OAA+CJ,GAAO7B,GAEtDF,eAAe+B,EAAK7B,EAASkC,EAAW5B,gBAMzC,IAAM6B,YAAc,SAAC7B,GAC1BF,EAAWE,MAAQA,UAGd,IAAM8B,WAAa,SAACC,GAGzB,OAFgBjC,EAAWkC,MAAM,CAAEpB,OAAQmB","sources":["./src/index.ts"],"sourcesContent":["import pino from 'pino';\nimport { format } from 'date-fns';\nimport ja from 'date-fns/locale/ja';\nimport { datadogLogs, StatusType, Datacenter } from '@datadog/browser-logs';\nimport { Context } from '@datadog/browser-core';\n\nlet DATADOG_INITIALIZED = false;\n\nexport function initDatadog(opts: { clientToken: string; applicationId: string }) {\n  datadogLogs.init({\n    clientToken: opts.clientToken,\n    datacenter: Datacenter.US,\n    applicationId: opts.applicationId,\n    silentMultipleInit: true,\n    forwardErrorsToLogs: true,\n    sampleRate: 100,\n  });\n\n  DATADOG_INITIALIZED = true;\n}\n\nexport function datadogMessage(message: string, context?: Context, status?: StatusType) {\n  if (!DATADOG_INITIALIZED) {\n    return;\n  }\n\n  datadogLogs.logger.log(\n    message,\n    {\n      context,\n    },\n    status\n  );\n}\n\nconst baseLogger = pino({\n  level: 'debug', // this is overwritten by setLevel\n  browser: {\n    serialize: true,\n    write: () => {}, // skip default serializer\n    transmit: {\n      send(level, logEvent) {\n        const loggerTree = logEvent.bindings.map((b) => b.module).join('.');\n\n        const timeLabel = format(new Date(logEvent.ts), 'HH:mm:ss', { locale: ja });\n\n        // level !== 'error': set first arg as a message\n        // level === 'error': set first arg's msg field as a message\n        const isError = level === 'error' && logEvent.messages[0].type === 'Error';\n\n        const msg = isError ? logEvent.messages[1] ?? logEvent.messages[0].msg : logEvent.messages[0];\n\n        // level !== 'error': set second arg as a context\n        // level === 'error': set third arg as a context\n        const context = logEvent.messages[isError ? 2 : 1];\n\n        // validation\n        if (typeof msg !== 'string') {\n          console.debug('[logger]', { level, logEvent, msg });\n          throw new Error(`${msg} should be string type`);\n        }\n        if (typeof context !== 'object') {\n          console.debug('[logger]', { level, logEvent, context });\n          throw new Error(`${msg} should be object type`);\n        }\n\n        // when level === 'error', console.error shows a stack trace on dev console\n        console[level](`${timeLabel} [${loggerTree}] ${msg}`, context);\n\n        datadogMessage(msg, context, StatusType[level]);\n      },\n    },\n  },\n});\n\nexport const setLogLevel = (level: string) => {\n  baseLogger.level = level;\n};\n\nexport const logFactory = (name: string) => {\n  const _logger = baseLogger.child({ module: name });\n\n  return _logger;\n};\n"],"names":["DATADOG_INITIALIZED","initDatadog","opts","datadogLogs","init","clientToken","datacenter","Datacenter","US","applicationId","silentMultipleInit","forwardErrorsToLogs","sampleRate","datadogMessage","message","context","status","logger","log","baseLogger","pino","level","browser","serialize","write","transmit","send","logEvent","_logEvent$messages$","loggerTree","bindings","map","b","module","join","timeLabel","format","Date","ts","locale","ja","isError","messages","type","msg","console","debug","Error","concat","StatusType","setLogLevel","logFactory","name","child"],"version":3,"file":"index.js.map"}