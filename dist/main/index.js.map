{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import pino from 'pino';\nimport { format } from 'date-fns';\nimport ja from 'date-fns/locale/ja';\nimport * as stackTraceParser from 'stacktrace-parser';\n\nconst options = {\n  logLevel: process.env.LOG_LEVEL ?? 'debug',\n  sharedContext: {},\n  masks: [] as string[],\n  maskFunc: (s: string) => `${s.substr(0, 8)}***`,\n};\n\nexport type Level = 'debug' | 'fatal' | 'error' | 'warn' | 'info' | 'trace';\nexport type StatusType = 'error' | 'warn' | 'info' | 'debug';\n\nconst PINO_TO_CONSOLE: Record<Level, StatusType> = {\n  debug: 'debug',\n  fatal: 'error',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  trace: 'info',\n};\n\nexport type ExternalLoggerType = (opts: {\n  message: string;\n  context?: Record<string, any>;\n  status?: StatusType;\n}) => void;\n\nexport const NO_OPS_LOGGER: ExternalLoggerType = () => {};\n\nlet _PRESENT_EXTERNAL_LOGGER = NO_OPS_LOGGER;\n\nexport function setExternalLogger(logger: ExternalLoggerType) {\n  _PRESENT_EXTERNAL_LOGGER = logger;\n}\n\nexport const setLogLevel = (logLevel: Level) => {\n  Object.assign(options, { logLevel });\n};\n\nexport const setContext = (context: Record<string, any>) => {\n  options.sharedContext = context;\n};\n\nexport const setMasks = (masks: string[]) => {\n  options.masks = masks;\n};\n\nexport const setMaskFunc = (f: (s: string) => string) => {\n  options.maskFunc = f;\n};\n\nexport type AGLoggerFunc = (\n  msgOrMergingObject?: string | Record<string, any>,\n  msg?: string,\n  ...interpolationValues: any[]\n) => void;\n\nexport interface AGLogger {\n  fatal: AGLoggerFunc;\n  error: AGLoggerFunc;\n  warn: AGLoggerFunc;\n  info: AGLoggerFunc;\n  debug: AGLoggerFunc;\n  child: (params: Record<string, any>) => AGLogger;\n}\n\nexport const logFactory = (name: string): AGLogger =>\n  pino({\n    name,\n    level: options.logLevel,\n    formatters: {\n      bindings: () => ({}), // omit pid and hostname\n      log: (o) =>\n        Object.fromEntries(\n          Object.entries(o).map(([k, v]) => [\n            k,\n            options.masks.findIndex((ele) => ele === k) >= 0 && (typeof v === 'string' || typeof v === 'number')\n              ? options.maskFunc(`${v}`)\n              : k === 'stack' && typeof v === 'string'\n              ? stackTraceParser.parse(v)\n              : v,\n          ])\n        ),\n    },\n    browser: {\n      serialize: true,\n      write: (o) => {\n        const { type, stack, level, time, msg, ...rest } = o as {\n          type?: 'Error'; // exist when logger.error is used\n          stack?: string; // exist when logger.error is used\n          level: number; // this is not a label (maybe this is a spec. bug)\n          time: number;\n          msg?: string;\n        };\n\n        const timeLabel = format(new Date(time), 'HH:mm:ss', { locale: ja });\n        const levelLabel = PINO_TO_CONSOLE[pino.levels.labels[`${level}`] as Level];\n\n        const s = `${timeLabel} [${name}] ${msg ?? ''}`;\n\n        const masked = Object.fromEntries(\n          Object.entries(rest).map(([k, v]) => [\n            k,\n            options.masks.findIndex((ele) => ele === k) >= 0 && (typeof v === 'string' || typeof v === 'number')\n              ? options.maskFunc(`${v}`)\n              : k === 'stack' && typeof v === 'string'\n              ? stackTraceParser.parse(v)\n              : v,\n          ])\n        );\n\n        if (Object.keys(masked).length) {\n          console[levelLabel](s, masked);\n        } else {\n          console[levelLabel](s);\n        }\n\n        _PRESENT_EXTERNAL_LOGGER({ message: msg ?? '', context: { logger: name, ...masked }, status: levelLabel });\n      },\n    },\n  });\n"],"names":[],"version":3,"file":"index.js.map"}