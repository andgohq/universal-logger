{"mappings":"wIAAA,SAASA,EAAuBC,GAC9B,OAAOA,GAAKA,EAAEC,WAAaD,EAAEE,QAAUF,o/DCMzC,IAAMG,EAAU,CACdC,oBAAoB,EACpBC,eAAQC,EAA2B,SACnCC,aAAa,EACbC,cAAe,GACfC,MAAO,GACPC,SAAU,SAACC,GAAD,MAAA,GAAAC,OAAkBD,EAAEE,OAAO,EAAG,GAA9B,SAKNC,EAA6C,CACjDC,MAAO,QACPC,MAAO,QACPC,KAAM,OACNC,KAAM,OACNC,MAAO,QACPC,MAAO,QASF,SAASC,EAAeC,EAAiBC,EAAmBC,GAC5DrB,EAAQC,oBAIbqB,EAAYC,OAAOC,IACjBL,EACA,CACEC,QAAOK,EAAAA,EAAA,GAAOzB,EAAQK,eAAkBe,IAE1CC,uBAhBG,SAAqBK,GAC1BJ,EAAYK,KAAKD,GAEjB1B,EAAQC,oBAAqB,gDAiBJ,SAACC,GAAyC,IAAxBE,EAAwBwB,UAAAC,OAAA,QAAA1B,IAAAyB,UAAA,IAAAA,UAAA,GACnEE,OAAOC,OAAO/B,EAAS,CAAEE,SAAAA,EAAUE,YAAAA,wBAGX,SAACgB,GACzBpB,EAAQK,cAAgBe,oBAGF,SAACd,GACvBN,EAAQM,MAAQA,uBAGS,SAAC0B,GAC1BhC,EAAQO,SAAWyB,sBAiBK,SAACC,GAAD,OACxBC,EAAK,CACHD,KAAAA,EACA7B,cAAaJ,EAAQI,aACjB,CACE+B,cAAe,eACfC,OAAQ,gBAGdC,MAAOrC,EAAQE,SACfoC,WAAY,CACVd,IAAK,SAACe,GAAD,OACHT,OAAOU,YACLV,OAAOW,QAAQF,GAAGG,KAAI,SAAAC,GAAA,IAAAC,EAAAC,EAAAF,EAAA,GAAEG,EAAFF,EAAA,GAAKG,EAALH,EAAA,GAAA,MAAY,CAChCE,EACA9C,EAAQM,MAAM0C,WAAU,SAACC,GAAD,OAASA,IAAQH,MAAM,IAAmB,iBAANC,GAA+B,iBAANA,GACjF/C,EAAQO,SAAR,GAAAE,OAAoBsC,IACpBA,SAIZG,QAAS,CACPC,WAAW,EACXC,MAAO,SAACb,GAAM,IAAAc,EACuCd,EAA9BF,GADTgB,EACJC,KADID,EACEE,MADFF,EACShB,OAAOmB,EADhBH,EACgBG,KAAMC,EADtBJ,EACsBI,IAAQC,EAD9BC,EAAAN,EAAA,CAAA,OAAA,QAAA,QAAA,OAAA,QASNO,EAAYC,EAAO,IAAIC,KAAKN,GAAO,WAAY,CAAEO,OAAQC,IACzDC,EAAatD,EAAgBuB,EAAKgC,OAAOC,OAAZ,GAAA1D,OAAsB4B,KAEnD7B,EAAC,GAAAC,OAAMmD,EAAN,MAAAnD,OAAoBwB,EAApB,MAAAxB,OAA6BgD,MAAAA,EAAAA,EAAO,IAErCW,EAAStC,OAAOU,YACpBV,OAAOW,QAAQiB,GAAMhB,KAAI,SAAA2B,GAAA,IAAAC,EAAAzB,EAAAwB,EAAA,GAAEvB,EAAFwB,EAAA,GAAKvB,EAALuB,EAAA,GAAA,MAAY,CACnCxB,EACA9C,EAAQM,MAAM0C,WAAU,SAACC,GAAD,OAASA,IAAQH,MAAM,IAAmB,iBAANC,GAA+B,iBAANA,GACjF/C,EAAQO,SAAR,GAAAE,OAAoBsC,IACpBA,OAIJjB,OAAOyC,KAAKH,GAAQvC,OACtB2C,QAAQP,GAAYzD,EAAG4D,GAEvBI,QAAQP,GAAYzD,GAGtBU,EAAeuC,MAAAA,EAAAA,EAAO,GAARhC,EAAA,CAAcF,OAAQU,GAASmC,GAAUH","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./src/index.ts"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$export(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import pino, { Level } from 'pino';\nexport type { Logger, Level } from 'pino';\nimport { format } from 'date-fns';\nimport ja from 'date-fns/locale/ja';\nimport { datadogLogs } from '@datadog/browser-logs';\nimport { Context } from '@datadog/browser-core';\n\nconst options = {\n  datadogInitialized: false,\n  logLevel: process.env.LOG_LEVEL ?? 'debug',\n  prettyPrint: false,\n  sharedContext: {},\n  masks: [] as string[],\n  maskFunc: (s: string) => `${s.substr(0, 8)}***`,\n};\n\nexport type StatusType = Exclude<Parameters<typeof datadogLogs['logger']['log']>[2], undefined>;\n\nconst PINO_TO_CONSOLE: Record<Level, StatusType> = {\n  fatal: 'error',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  debug: 'debug',\n  trace: 'info',\n};\n\nexport function initDatadog(userConfiguration: Parameters<typeof datadogLogs.init>[0]) {\n  datadogLogs.init(userConfiguration);\n\n  options.datadogInitialized = true;\n}\n\nexport function datadogMessage(message: string, context?: Context, status?: StatusType) {\n  if (!options.datadogInitialized) {\n    return;\n  }\n\n  datadogLogs.logger.log(\n    message,\n    {\n      context: { ...options.sharedContext, ...context },\n    },\n    status\n  );\n}\n\nexport const setLogLevel = (logLevel: Level, prettyPrint = false) => {\n  Object.assign(options, { logLevel, prettyPrint });\n};\n\nexport const setContext = (context: Record<string, any>) => {\n  options.sharedContext = context;\n};\n\nexport const setMasks = (masks: string[]) => {\n  options.masks = masks;\n};\n\nexport const setMaskFunc = (f: (s: string) => string) => {\n  options.maskFunc = f;\n};\n\nexport type AGLoggerFunc = (\n  msgOrMergingObject?: string | Record<string, any>,\n  msg?: string,\n  ...interpolationValues: any[]\n) => void;\n\nexport interface AGLogger {\n  fatal: AGLoggerFunc;\n  error: AGLoggerFunc;\n  warn: AGLoggerFunc;\n  info: AGLoggerFunc;\n  debug: AGLoggerFunc;\n}\n\nexport const logFactory = (name: string): AGLogger =>\n  pino({\n    name,\n    prettyPrint: options.prettyPrint\n      ? {\n          translateTime: 'SYS:HH:mm:ss',\n          ignore: 'pid,hostname',\n        }\n      : false,\n    level: options.logLevel,\n    formatters: {\n      log: (o) =>\n        Object.fromEntries(\n          Object.entries(o).map(([k, v]) => [\n            k,\n            options.masks.findIndex((ele) => ele === k) >= 0 && (typeof v === 'string' || typeof v === 'number')\n              ? options.maskFunc(`${v}`)\n              : v,\n          ])\n        ),\n    },\n    browser: {\n      serialize: true,\n      write: (o) => {\n        const { type, stack, level, time, msg, ...rest } = o as {\n          type?: 'Error'; // exist when logger.error is used\n          stack?: string; // exist when logger.error is used\n          level: number; // this is not a label (maybe this is a spec. bug)\n          time: number;\n          msg?: string;\n        };\n\n        const timeLabel = format(new Date(time), 'HH:mm:ss', { locale: ja });\n        const levelLabel = PINO_TO_CONSOLE[pino.levels.labels[`${level}`] as Level];\n\n        const s = `${timeLabel} [${name}] ${msg ?? ''}`;\n\n        const masked = Object.fromEntries(\n          Object.entries(rest).map(([k, v]) => [\n            k,\n            options.masks.findIndex((ele) => ele === k) >= 0 && (typeof v === 'string' || typeof v === 'number')\n              ? options.maskFunc(`${v}`)\n              : v,\n          ])\n        );\n\n        if (Object.keys(masked).length) {\n          console[levelLabel](s, masked);\n        } else {\n          console[levelLabel](s);\n        }\n\n        datadogMessage(msg ?? '', { logger: name, ...masked }, levelLabel);\n      },\n    },\n  });\n"],"names":["$parcel$interopDefault","a","__esModule","default","options","datadogInitialized","logLevel","undefined","prettyPrint","sharedContext","masks","maskFunc","s","concat","substr","PINO_TO_CONSOLE","fatal","error","warn","info","debug","trace","datadogMessage","message","context","status","datadogLogs","logger","log","$d22a8b6566d19e3c0fc43cb3d743b949$var$_objectSpread","userConfiguration","init","arguments","length","Object","assign","f","name","pino","translateTime","ignore","level","formatters","o","fromEntries","entries","map","_ref","_ref2","$d22a8b6566d19e3c0fc43cb3d743b949$var$_slicedToArray","k","v","findIndex","ele","browser","serialize","write","_ref3","type","stack","time","msg","rest","$d22a8b6566d19e3c0fc43cb3d743b949$var$_objectWithoutProperties","timeLabel","format","Date","locale","ja","levelLabel","levels","labels","masked","_ref4","_ref5","keys","console"],"version":3,"file":"index.js.map"}