{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import pino from 'pino';\nimport chalkModule from 'chalk';\nimport dayjs from 'dayjs';\nimport maskJsonFactory from 'mask-json';\n\nexport type Level = 'debug' | 'fatal' | 'error' | 'warn' | 'info' | 'trace';\nexport type StatusType = 'error' | 'warn' | 'info' | 'debug';\nexport type LogFn = pino.LogFn;\nexport type ExternalLoggerType = (opts: {\n  message: string;\n  context?: Record<string, any>;\n  status?: StatusType;\n}) => void;\n\nexport interface AGLogger {\n  fatal: LogFn;\n  error: LogFn;\n  warn: LogFn;\n  info: LogFn;\n  debug: LogFn;\n  child: (params: Record<string, any>) => AGLogger;\n}\n\nexport const NO_OPS_LOGGER: ExternalLoggerType = () => {};\n\nconst DEFAULT_CHALK_LEVEL = 1;\n\nconst LEVEL_TO_CONSOLE: Record<Level, StatusType> = {\n  debug: 'debug',\n  fatal: 'info',\n  error: 'info', // use info to disable stack trace\n  warn: 'info', // use info to disable stack trace\n  info: 'info',\n  trace: 'info',\n};\n\nconst LEVEL_TO_LABEL: Record<Level, string> = {\n  debug: 'D',\n  fatal: 'F',\n  error: 'E',\n  warn: 'W',\n  info: 'I',\n  trace: 'I',\n};\n\nconst OPTIONS = {\n  level: (process.env.LOG_LEVEL ?? 'debug') as Level,\n  context: {} as Record<string, any>,\n  maskTargets: [] as string[],\n  maskReplacement: '***',\n  enableStack: true,\n  browser: {\n    inline: false,\n  },\n};\n\nlet chalk = new chalkModule.Instance({ level: DEFAULT_CHALK_LEVEL });\nlet maskJson = maskJsonFactory([], { replacement: OPTIONS.maskReplacement });\nlet PRESENT_EXTERNAL_LOGGER = NO_OPS_LOGGER;\n\nexport const updateOptions = (options: Partial<typeof OPTIONS>) => {\n  Object.assign(OPTIONS, options);\n\n  maskJson = maskJsonFactory(OPTIONS.maskTargets, { replacement: OPTIONS.maskReplacement });\n};\n\nexport function setExternalLogger(logger: ExternalLoggerType) {\n  PRESENT_EXTERNAL_LOGGER = logger;\n}\n\nexport const setColorLevel = (level: chalkModule.Level) => {\n  chalk = new chalkModule.Instance({ level });\n};\n\nconst pickExists = (obj: Record<string, any>) => {\n  return Object.fromEntries(Object.entries(obj).filter(([, v]) => v !== undefined));\n};\n\nconst summarize = (obj: Record<string, any>) => {\n  // omit stack, level, time, msg from the parameter object\n  const { type, message, stack, err, msg, method, ...rest } = obj as {\n    // properties when the object is Error instance\n    // error style 1\n    type?: 'Error';\n    message?: string; // exist when logger.error is used\n    stack?: string; // exist when logger.error is used\n    // error style 2\n    err?: Error;\n    // standard properties\n    msg?: string;\n    method?: string;\n  };\n\n  const isErrorMode = (type == 'Error' && stack) || err;\n  const finalMsg = (isErrorMode ? msg ?? message ?? err?.message : msg) ?? '';\n  const finalParams = {\n    ...maskJson(rest),\n    ...(isErrorMode && OPTIONS.enableStack\n      ? { stack: (stack ?? err?.stack ?? '').split('\\n') }\n      : pickExists({ type, message, stack })),\n  };\n\n  return { msg: finalMsg, method, ...finalParams };\n};\n\nexport const logFactory = (name: string): AGLogger =>\n  pino({\n    name,\n    level: OPTIONS.level,\n    formatters: {\n      // omit pid and hostname\n      bindings: ({ name }) => ({ name }),\n      // for nodejs environment only\n      log: (o) => {\n        const { level, time, ...rest } = o as Record<string, any>;\n\n        return { level, time, ...summarize(rest) };\n      },\n    },\n    browser: {\n      // use Pino's standard serializers\n      // https://github.com/pinojs/pino-std-serializers\n      serialize: false,\n      write: (o) => {\n        const { level, time, ...rest } = o as Record<string, any>;\n        const { msg, method, ...params } = summarize(rest);\n\n        const LEVEL_TO_COLOR: Record<Level, typeof chalkModule.Instance | ((s: string) => string)> = {\n          debug: chalk.gray,\n          fatal: chalk.bgRed.white,\n          error: chalk.red,\n          warn: chalk.yellow,\n          info: (s: string) => s,\n          trace: (s: string) => s,\n        };\n\n        const color = LEVEL_TO_COLOR[pino.levels.labels[`${level}`]];\n        // get HH:mm:ss\n        const timeLabel = dayjs(time).format('HH:mm:ss');\n        const levelKey = pino.levels.labels[`${level}`] as Level;\n        const consoleKey = LEVEL_TO_CONSOLE[levelKey];\n        const levelLabel = LEVEL_TO_LABEL[levelKey];\n\n        const _method = method ? `:${method}` : '';\n        const s = `${timeLabel} ${levelLabel} [${name}${_method}] ${msg}`;\n\n        if (Object.keys(params).length) {\n          if (OPTIONS.browser.inline) {\n            console[consoleKey](color(`${s} ${JSON.stringify(params)}`));\n          } else {\n            console[consoleKey](color(s), params);\n          }\n        } else {\n          console[consoleKey](color(s));\n        }\n\n        PRESENT_EXTERNAL_LOGGER({\n          message: msg || '',\n          context: { logger: name, ...params },\n          status: levelKey as StatusType,\n        });\n      },\n    },\n  });\n"],"names":[],"version":3,"file":"main.js.map"}