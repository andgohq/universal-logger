{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import pino from 'pino';\nimport c from 'ansi-colors';\nimport dayjs from 'dayjs';\nimport maskJsonFactory from 'mask-json';\n\nexport type Level = 'debug' | 'fatal' | 'error' | 'warn' | 'info' | 'trace';\nexport type StatusType = 'error' | 'warn' | 'info' | 'debug';\nexport type LogFn = pino.LogFn;\nexport type ExternalLoggerType = (opts: {\n  message: string;\n  context?: Record<string, any>;\n  status?: StatusType;\n}) => void;\n\nexport interface AGLogger {\n  fatal: LogFn;\n  error: LogFn;\n  warn: LogFn;\n  info: LogFn;\n  debug: LogFn;\n  child: (params: Record<string, any>) => AGLogger;\n}\n\nexport const NO_OPS_LOGGER: ExternalLoggerType = () => {};\n\nconst LEVEL_TO_CONSOLE: Record<Level, StatusType> = {\n  debug: 'debug',\n  fatal: 'info',\n  error: 'info', // use info to disable stack trace\n  warn: 'info', // use info to disable stack trace\n  info: 'info',\n  trace: 'info',\n};\n\nconst LEVEL_TO_LABEL: Record<Level, string> = {\n  debug: 'D',\n  fatal: 'F',\n  error: 'E',\n  warn: 'W',\n  info: 'I',\n  trace: 'I',\n};\n\nconst OPTIONS = {\n  level: (process.env.LOG_LEVEL ?? 'debug') as Level,\n  context: {} as Record<string, any>,\n  maskTargets: [] as string[],\n  maskReplacement: '***',\n  enableStack: true,\n  browser: {\n    color: true,\n    inline: false,\n  },\n};\n\nlet maskJson = maskJsonFactory([], { replacement: OPTIONS.maskReplacement });\nlet PRESENT_EXTERNAL_LOGGER = NO_OPS_LOGGER;\n\nexport const updateOptions = (options: Partial<typeof OPTIONS>) => {\n  Object.assign(OPTIONS, options);\n\n  maskJson = maskJsonFactory(OPTIONS.maskTargets, {\n    replacement: OPTIONS.maskReplacement,\n  });\n};\n\nexport function setExternalLogger(logger: ExternalLoggerType) {\n  PRESENT_EXTERNAL_LOGGER = logger;\n}\n\nconst pickExists = (obj: Record<string, any>) => {\n  return Object.fromEntries(Object.entries(obj).filter(([, v]) => v !== undefined));\n};\n\nconst summarize = (obj: Record<string, any>) => {\n  // omit stack, level, time, msg from the parameter object\n  const { type, message, stack, err, msg, method, ...rest } = obj as {\n    // properties when the object is Error instance\n    // error style 1\n    type?: 'Error';\n    message?: string; // exist when logger.error is used\n    stack?: string; // exist when logger.error is used\n    // error style 2\n    err?: Error;\n    // standard properties\n    msg?: string;\n    method?: string;\n  };\n\n  const isErrorMode = (type === 'Error' && stack) || err;\n  const finalMsg = (isErrorMode ? msg ?? message ?? err?.message : msg) ?? '';\n  const finalParams = {\n    ...maskJson(rest),\n    ...(isErrorMode && OPTIONS.enableStack ? { stack: (stack ?? err?.stack ?? '').split('\\n') } : pickExists({ type, message, stack })),\n  };\n\n  return { msg: finalMsg, method, ...finalParams };\n};\n\nexport const logFactory = (name: string): AGLogger =>\n  pino({\n    name,\n    level: OPTIONS.level,\n    formatters: {\n      // omit pid and hostname\n      bindings: ({ name }) => ({ name }),\n      // for nodejs environment only\n      log: (o) => {\n        const { level, time, ...rest } = o as Record<string, any>;\n\n        return { level, time, ...summarize(rest) };\n      },\n    },\n    browser: {\n      // use Pino's standard serializers\n      // https://github.com/pinojs/pino-std-serializers\n      serialize: false,\n      write: (o) => {\n        const { level, time, ...rest } = o as Record<string, any>;\n        const { msg, method, ...params } = summarize(rest);\n\n        const noColor = (s: string) => s;\n\n        const LEVEL_TO_COLOR: Record<Level, (s: string) => string> = {\n          debug: OPTIONS.browser.color ? c.gray : noColor,\n          fatal: OPTIONS.browser.color ? c.bgRed.white : noColor,\n          error: OPTIONS.browser.color ? c.red : noColor,\n          warn: OPTIONS.browser.color ? c.yellow : noColor,\n          info: noColor,\n          trace: noColor,\n        };\n\n        const color = LEVEL_TO_COLOR[pino.levels.labels[`${level}`]];\n        // get HH:mm:ss\n        const timeLabel = dayjs(time).format('HH:mm:ss');\n        const levelKey = pino.levels.labels[`${level}`] as Level;\n        const consoleKey = LEVEL_TO_CONSOLE[levelKey];\n        const levelLabel = LEVEL_TO_LABEL[levelKey];\n\n        const _method = method ? `:${method}` : '';\n        const s = `${timeLabel} ${levelLabel} [${name}${_method}] ${msg}`;\n\n        if (Object.keys(params).length) {\n          if (OPTIONS.browser.inline) {\n            console[consoleKey](color(`${s} ${JSON.stringify(params)}`));\n          } else {\n            console[consoleKey](color(s), params);\n          }\n        } else {\n          console[consoleKey](color(s));\n        }\n\n        PRESENT_EXTERNAL_LOGGER({\n          message: msg || '',\n          context: { logger: name, ...params },\n          status: levelKey as StatusType,\n        });\n      },\n    },\n  });\n"],"names":[],"version":3,"file":"main.js.map"}