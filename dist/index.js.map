{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import pino from 'pino';\nimport { format } from 'date-fns';\nimport ja from 'date-fns/locale/ja';\nimport * as stackTraceParser from 'stacktrace-parser';\n\nconst options = {\n  logLevel: process.env.LOG_LEVEL || 'debug',\n  sharedContext: {},\n  masks: [] as string[],\n  maskFunc: (s: string) => `${s.substr(0, 8)}***`,\n};\n\nexport type Level = 'debug' | 'fatal' | 'error' | 'warn' | 'info' | 'trace';\nexport type StatusType = 'error' | 'warn' | 'info' | 'debug';\n\nconst PINO_TO_CONSOLE: Record<Level, StatusType> = {\n  debug: 'debug',\n  fatal: 'error',\n  error: 'error',\n  warn: 'warn',\n  info: 'info',\n  trace: 'info',\n};\n\nexport type ExternalLoggerType = (opts: {\n  message: string;\n  context?: Record<string, any>;\n  status?: StatusType;\n}) => void;\n\nexport const NO_OPS_LOGGER: ExternalLoggerType = () => {};\n\nlet _PRESENT_EXTERNAL_LOGGER = NO_OPS_LOGGER;\n\nexport function setExternalLogger(logger: ExternalLoggerType) {\n  _PRESENT_EXTERNAL_LOGGER = logger;\n}\n\nexport const setLogLevel = (logLevel: Level) => {\n  Object.assign(options, { logLevel });\n};\n\nexport const setContext = (context: Record<string, any>) => {\n  options.sharedContext = context;\n};\n\nexport const setMasks = (masks: string[]) => {\n  options.masks = masks;\n};\n\nexport const setMaskFunc = (f: (s: string) => string) => {\n  options.maskFunc = f;\n};\n\nexport type LogFn = pino.LogFn;\n\nexport interface AGLogger {\n  fatal: LogFn;\n  error: LogFn;\n  warn: LogFn;\n  info: LogFn;\n  debug: LogFn;\n  child: (params: Record<string, any>) => AGLogger;\n}\n\nexport const logFactory = (name: string): AGLogger =>\n  pino({\n    name,\n    level: options.logLevel,\n    formatters: {\n      bindings: ({ name }) => ({ name }), // omit pid and hostname\n      log: (o) =>\n        Object.fromEntries(\n          Object.entries(o).map(([k, v]) => [\n            k,\n            options.masks.findIndex((ele) => ele === k) >= 0 && (typeof v === 'string' || typeof v === 'number')\n              ? options.maskFunc(`${v}`)\n              : k === 'stack' && typeof v === 'string'\n              ? stackTraceParser.parse(v)\n              : v,\n          ])\n        ),\n    },\n    browser: {\n      serialize: true,\n      write: (o) => {\n        const { type, stack, level, time, msg, ...rest } = o as {\n          type?: 'Error'; // exist when logger.error is used\n          stack?: string; // exist when logger.error is used\n          level: number; // this is not a label (maybe this is a spec. bug)\n          time: number;\n          msg?: string;\n        };\n\n        const timeLabel = format(new Date(time), 'HH:mm:ss', { locale: ja });\n        const levelLabel = PINO_TO_CONSOLE[pino.levels.labels[`${level}`] as Level];\n\n        const s = `${timeLabel} [${name}] ${msg || ''}`;\n\n        const masked = Object.fromEntries(\n          Object.entries(rest).map(([k, v]) => [\n            k,\n            options.masks.findIndex((ele) => ele === k) >= 0 && (typeof v === 'string' || typeof v === 'number')\n              ? options.maskFunc(`${v}`)\n              : k === 'stack' && typeof v === 'string'\n              ? stackTraceParser.parse(v)\n              : v,\n          ])\n        );\n\n        if (Object.keys(masked).length) {\n          console[levelLabel](s, masked);\n        } else {\n          console[levelLabel](s);\n        }\n\n        _PRESENT_EXTERNAL_LOGGER({ message: msg || '', context: { logger: name, ...masked }, status: levelLabel });\n      },\n    },\n  });\n"],"names":["pino","stackTraceParser","format","ja"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,MAAM,UAAU;AAAA,EACd,UAAU,QAAQ,IAAI,aAAa;AAAA,EACnC,eAAe;AAAA,EACf,OAAO;AAAA,EACP,UAAU,CAAC,MAAc,GAAG,EAAE,OAAO,GAAG;AAAA;AAM1C,MAAM,kBAA6C;AAAA,EACjD,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA;MASI,gBAAoC,MAAM;AAAA;AAEvD,IAAI,2BAA2B;2BAEG,QAA4B;AAC5D,6BAA2B;AAAA;MAGhB,cAAc,CAAC,aAAoB;AAC9C,SAAO,OAAO,SAAS,EAAE;AAAA;MAGd,aAAa,CAAC,YAAiC;AAC1D,UAAQ,gBAAgB;AAAA;MAGb,WAAW,CAAC,UAAoB;AAC3C,UAAQ,QAAQ;AAAA;MAGL,cAAc,CAAC,MAA6B;AACvD,UAAQ,WAAW;AAAA;MAcR,aAAa,CAAC,SACzBA,yBAAK;AAAA,EACH;AAAA,EACA,OAAO,QAAQ;AAAA,EACf,YAAY;AAAA,IACV,UAAU,CAAC,EAAE,qBAAc;AAAA,IAC3B,KAAK,CAAC,MACJ,OAAO,YACL,OAAO,QAAQ,GAAG,IAAI,CAAC,CAAC,GAAG,OAAO;AAAA,MAChC;AAAA,MACA,QAAQ,MAAM,UAAU,CAAC,QAAQ,QAAQ,MAAM,aAAa,MAAM,YAAY,OAAO,MAAM,YACvF,QAAQ,SAAS,GAAG,OACpB,MAAM,WAAW,OAAO,MAAM,WAC9BC,4BAAiB,MAAM,KACvB;AAAA;AAAA;AAAA,EAIZ,SAAS;AAAA,IACP,WAAW;AAAA,IACX,OAAO,CAAC,MAAM;AACZ,YAAM,EAAE,MAAM,OAAO,OAAO,MAAM,QAAQ,SAAS;AAQnD,YAAM,YAAYC,eAAO,IAAI,KAAK,OAAO,YAAY,EAAE,QAAQC;AAC/D,YAAM,aAAa,gBAAgBH,yBAAK,OAAO,OAAO,GAAG;AAEzD,YAAM,IAAI,GAAG,cAAc,SAAS,OAAO;AAE3C,YAAM,SAAS,OAAO,YACpB,OAAO,QAAQ,MAAM,IAAI,CAAC,CAAC,GAAG,OAAO;AAAA,QACnC;AAAA,QACA,QAAQ,MAAM,UAAU,CAAC,QAAQ,QAAQ,MAAM,aAAa,MAAM,YAAY,OAAO,MAAM,YACvF,QAAQ,SAAS,GAAG,OACpB,MAAM,WAAW,OAAO,MAAM,WAC9BC,4BAAiB,MAAM,KACvB;AAAA;AAIR,UAAI,OAAO,KAAK,QAAQ,QAAQ;AAC9B,gBAAQ,YAAY,GAAG;AAAA,aAClB;AACL,gBAAQ,YAAY;AAAA;AAGtB,+BAAyB,EAAE,SAAS,OAAO,IAAI,SAAS,EAAE,QAAQ,SAAS,UAAU,QAAQ;AAAA;AAAA;AAAA;;;;;;;;;;"}